/* ======================================================================
   USER-GFMD - Elastic half-space methods for LAMMPS
   https://github.com/Atomistica/user-gfmd

   Copyright (2011-2016,2021)
      Lars Pastewka <lars.pastewka@imtek.uni-freiburg>,
      Tristan A. Sharp and others.
   See the AUTHORS file in the top-level USER-GFMD directory.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.
   ====================================================================== */
diff --git a/src/atom.cpp b/src/atom.cpp
index ecb82993c..8722637dc 100644
--- a/src/atom.cpp
+++ b/src/atom.cpp
@@ -197,6 +197,12 @@ Atom::Atom(LAMMPS *lmp) : Pointers(lmp)
   rho = drho = esph = desph = cv = nullptr;
   vest = nullptr;
 
+  // USER-GFMD package
+
+  gid = nullptr;
+  gflag = nullptr;
+  xeq = nullptr;
+
   // end of customization section
   // --------------------------------------------------------------------
 
@@ -509,6 +515,12 @@ void Atom::peratom_create()
   add_peratom("eff_plastic_strain_rate",&eff_plastic_strain_rate,DOUBLE,0);
   add_peratom("damage",&damage,DOUBLE,0);
 
+  // USER-GFMD package
+
+  add_peratom("gid",&gid,INT,3);
+  add_peratom("gflag",&gflag,INT,0);
+  add_peratom("xeq",&xeq,DOUBLE,3);
+
   // end of customization section
   // --------------------------------------------------------------------
 }
@@ -615,6 +627,7 @@ void Atom::set_atomflag_defaults()
   mesont_flag = 0;
   contact_radius_flag = smd_data_9_flag = smd_stress_flag = 0;
   eff_plastic_strain_flag = eff_plastic_strain_rate_flag = 0;
+  gfmd_flag = 0;
 
   pdscale = 1.0;
 }
@@ -2648,6 +2661,11 @@ void *Atom::extract(const char *name)
   if (strcmp(name,"dpdTheta") == 0) return (void *) dpdTheta;
   if (strcmp(name,"edpd_temp") == 0) return (void *) edpd_temp;
 
+  // USER-GFMD package
+  if (strcmp(name,"gid") == 0) return (void *) gid;
+  if (strcmp(name,"gflag") == 0) return (void *) gflag;
+  if (strcmp(name,"xeq") == 0) return (void *) xeq;
+
   // end of customization section
   // --------------------------------------------------------------------
 
@@ -2731,6 +2749,11 @@ int Atom::extract_datatype(const char *name)
   if (strcmp(name,"dpdTheta") == 0) return LAMMPS_DOUBLE;
   if (strcmp(name,"edpd_temp") == 0) return LAMMPS_DOUBLE;
 
+  // USER-GFMD package
+  if (strcmp(name,"gid") == 0) return LAMMPS_INT;
+  if (strcmp(name,"gflag") == 0) return LAMMPS_INT;
+  if (strcmp(name,"xeq") == 0) return LAMMPS_DOUBLE_2D;
+
   // end of customization section
   // --------------------------------------------------------------------
 
